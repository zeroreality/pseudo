../out/tmp:424: WARNING - assignment to property of of Array
found   : function((Object|null)): (Array|null)
required: function(...T): Array<T>
Array.of = Array.of || function(list) {
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:1503: WARNING - inconsistent return type
found   : (string|undefined)
required: string
	if (IS_NAN(this.valueOf())) return arguments.length > 1 ? invalid : DATE_INVALID.toString();
	                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:1930: WARNING - Property trimStart never defined on String
	if (arguments.length < 1) return this.trimStart();
	                                      ^^^^^^^^^

../out/tmp:1954: WARNING - Property trimEnd never defined on String
	if (arguments.length < 1) return this.trimEnd();
	                                      ^^^^^^^

../out/tmp:2074: WARNING - parameter string does not appear in String_prototype.before's parameter list
String_prototype.before = function(value) {
                          ^^^^^^^^^^^^^^^^^^

../out/tmp:2088: WARNING - parameter string does not appear in String_prototype.beforeLast's parameter list
String_prototype.beforeLast = function(value) {
                              ^^^^^^^^^^^^^^^^^^

../out/tmp:2224: WARNING - actual parameter 1 of Element.prototype.matches does not match formal parameter
found   : (Array<string>|null|string|undefined)
required: string
	return this.matches(query)
	                    ^^^^^

../out/tmp:2364: WARNING - inconsistent return type
found   : Node
required: (Element|null)
	return child;
	       ^^^^^

../out/tmp:2676: WARNING - inconsistent return type
found   : (Element|null)
required: (HTMLElement|null)
	return DOC.getElementById(id) || null;
	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:2828: WARNING - Parse error. invalid param name "definition.init"
 * @param {!string} definition.init
                    ^

../out/tmp:2829: WARNING - Parse error. invalid param name "definition.type"
 * @param {!string} definition.type
                    ^

../out/tmp:2830: WARNING - Parse error. invalid param name "definition.bubbles"
 * @param {boolean=} definition.bubbles
                     ^

../out/tmp:2831: WARNING - Parse error. invalid param name "definition.cancelable"
 * @param {boolean=} definition.cancelable
                     ^

../out/tmp:2832: WARNING - Parse error. invalid param name "definition.view"
 * @param {Window=} definition.view
                    ^

../out/tmp:2833: WARNING - Parse error. invalid param name "definition.detail"
 * @param {number=} definition.detail
                    ^

../out/tmp:2834: WARNING - Parse error. invalid param name "definition.screenX"
 * @param {number=} definition.screenX
                    ^

../out/tmp:2835: WARNING - Parse error. invalid param name "definition.screenY"
 * @param {number=} definition.screenY
                    ^

../out/tmp:2836: WARNING - Parse error. invalid param name "definition.clientX"
 * @param {number=} definition.clientX
                    ^

../out/tmp:2837: WARNING - Parse error. invalid param name "definition.clientY"
 * @param {number=} definition.clientY
                    ^

../out/tmp:2838: WARNING - Parse error. invalid param name "definition.ctrlKey"
 * @param {boolean=} definition.ctrlKey
                     ^

../out/tmp:2839: WARNING - Parse error. invalid param name "definition.altKey"
 * @param {boolean=} definition.altKey
                     ^

../out/tmp:2840: WARNING - Parse error. invalid param name "definition.shiftKey"
 * @param {boolean=} definition.shiftKey
                     ^

../out/tmp:2841: WARNING - Parse error. invalid param name "definition.metaKey"
 * @param {boolean=} definition.metaKey
                     ^

../out/tmp:2842: WARNING - Parse error. invalid param name "definition.ctrlKey"
 * @param {boolean=} definition.ctrlKey
                     ^

../out/tmp:2843: WARNING - Parse error. invalid param name "definition.button"
 * @param {number=} definition.button
                    ^

../out/tmp:2844: WARNING - Parse error. invalid param name "definition.keyCode"
 * @param {number=} definition.keyCode
                    ^

../out/tmp:2845: WARNING - Parse error. invalid param name "definition.charCode"
 * @param {number=} definition.charCode
                    ^

../out/tmp:2846: WARNING - Parse error. invalid param name "definition.relatedTarget"
 * @param {Node=} definition.relatedTarget
                  ^

../out/tmp:2847: WARNING - Parse error. invalid param name "definition.relatedNode"
 * @param {Node=} definition.relatedNode
                  ^

../out/tmp:2848: WARNING - Parse error. invalid param name "definition.prevValue"
 * @param {string=} definition.prevValue
                    ^

../out/tmp:2849: WARNING - Parse error. invalid param name "definition.newValue"
 * @param {string=} definition.newValue
                    ^

../out/tmp:2850: WARNING - Parse error. invalid param name "definition.attrName"
 * @param {string=} definition.attrName
                    ^

../out/tmp:2851: WARNING - Parse error. invalid param name "definition.attrChange"
 * @param {number=} definition.attrChange
                    ^

../out/tmp:3028: WARNING - actual parameter 1 of handlerEvent does not match formal parameter
found   : (Object|null|string)
required: (Object|null)
	var e = handlerEvent(OBJECT_IS_STRING(event) ? { "type": event } : event);
	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:3128: WARNING - inconsistent return type
found   : (string|undefined)
required: string
	return COOKIE_GETTER(name);
	       ^^^^^^^^^^^^^^^^^^^

../out/tmp:3137: WARNING - actual parameter 3 of COOKIE_SETTER does not match formal parameter
found   : Date
required: (string|undefined)
	return !COOKIE_SETTER(name, "", new Date(0));
	                                ^^^^^^^^^^^

../out/tmp:4113: WARNING - Bad type annotation. Unknown type Processor
 * @this {Processor}
          ^

../out/tmp:4132: WARNING - assignment
found   : {}
required: {per: number, wait: number}
missing : [per,wait]
mismatch: []
	if (!options) options = {};
	              ^^^^^^^^^^^^

../out/tmp:4177: WARNING - Bad type annotation. Unknown type Processor
 * @this {Processor}
          ^

../out/tmp:4180: WARNING - Left operand of || operator is always falsy.
	this.__timer = CLEAR_INSTANT(this.__timer) || 0;
	               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:4292: WARNING - inconsistent return type
found   : Node
required: (HTMLIFrameElement|null)
	return PROTOCOL_CHECK_IFRAME
	       ^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:4293: WARNING - assignment
found   : Node
required: (HTMLIFrameElement|null)
		|| (PROTOCOL_CHECK_IFRAME = BODY.appendChild(DOC.element("iframe", {
		    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:4306: WARNING - Left operand of || operator is always falsy.
			: /*@cc_on!@*/false || !!DOC["documentMode"]
			              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:4462: WARNING - inconsistent return type
found   : Node
required: (HTMLScriptElement|null)
	return DOC_HEAD.appendChild(file);
	       ^^^^^^^^^^^^^^^^^^^^^^^^^^

../out/tmp:4611: WARNING - dangerous use of the global this object
})(this['pseudo3']={});
   ^^^^

0 error(s), 45 warning(s), 87.2% typed
